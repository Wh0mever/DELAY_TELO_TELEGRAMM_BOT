# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from database import db
import content
import keyboards

router = Router()


@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await callback.message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞–±–∞—Ç–∞-–ò–Ω—Ç–µ–Ω—Å–∏–≤:",
        reply_markup=keyboards.get_main_menu_keyboard()
    )


@router.callback_query(F.data == "my_progress")
async def my_progress(callback: CallbackQuery):
    """–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    await callback.answer()
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = db.get_user_progress(user_id)
    user = db.get_user(user_id)
    achievements = db.get_user_achievements(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"""üìä **–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–µ**

üóì –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {user['current_day']}

üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress['workouts']}
‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress['tasks']}
‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {progress['points']}
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['percentage']}%

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
"""
    
    if achievements:
        for ach in achievements:
            ach_name = content.ACHIEVEMENTS.get(ach['achievement_name'], ach['achievement_name'])
            message_text += f"‚Ä¢ {ach_name}\n"
    else:
        message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
    
    await callback.message.answer(
        message_text,
        parse_mode="Markdown",
        reply_markup=keyboards.get_back_to_menu_keyboard()
    )


@router.callback_query(F.data == "schedule")
async def schedule(callback: CallbackQuery):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    current_day = user['current_day']
    
    schedule_text = f"""üìÖ <b>–†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ù–¢–ï–ù–°–ò–í–ê</b>

<b>–ù–ï–î–ï–õ–Ø 1 ‚Äì #–ù–ê–ï–î–ò–ù–ï–°–°–û–ë–û–ô</b>
–î–µ–Ω—å 1 ‚Äî –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –¢–∞–±–∞—Ç–∞
–î–µ–Ω—å 2 ‚Äî –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
–î–µ–Ω—å 3 ‚Äî –†—É–∫–∏ + –ü—Ä–µ—Å—Å
–î–µ–Ω—å 4 ‚Äî 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
–î–µ–Ω—å 5 ‚Äî –Ø–≥–æ–¥–∏—Ü—ã
–î–µ–Ω—å 6 ‚Äî –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞
–î–µ–Ω—å 7 ‚Äî –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è + –ô–æ–≥–∞

<b>–ù–ï–î–ï–õ–Ø 2 ‚Äì #–ú–ï–ù–Ø–Æ–°–¨–í–ö–£–°–ù–û</b>
–î–µ–Ω—å 8 ‚Äî –†—É–∫–∏ + –ü—Ä–µ—Å—Å (—Å —Ä–µ–∑–∏–Ω–∫–æ–π)
–î–µ–Ω—å 9 ‚Äî –ò—Å—Ç–æ—Ä–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏
–î–µ–Ω—å 10 ‚Äî –Ø–≥–æ–¥–∏—Ü—ã (—Å —Ä–µ–∑–∏–Ω–∫–æ–π)
–î–µ–Ω—å 11 ‚Äî –û—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã
–î–µ–Ω—å 12 ‚Äî –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –¢–∞–±–∞—Ç–∞
–î–µ–Ω—å 13 ‚Äî –ì–æ—Ç–æ–≤–ª—é —Å –ª—é–±–æ–≤—å—é
–î–µ–Ω—å 14 ‚Äî –¢–∞–Ω—Ü—ã + –ô–æ–≥–∞

<b>–ù–ï–î–ï–õ–Ø 3 ‚Äì #–ü–û–õ–ù–û–ï–ü–û–ì–†–£–ñ–ï–ù–ò–ï</b>
–î–µ–Ω—å 15 ‚Äî –†—É–∫–∏ + –ü—Ä–µ—Å—Å (—Å —Ä–µ–∑–∏–Ω–∫–æ–π)
–î–µ–Ω—å 16 ‚Äî 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
–î–µ–Ω—å 17 ‚Äî –Ø–≥–æ–¥–∏—Ü—ã (—Ñ–∏–Ω–∞–ª)
–î–µ–Ω—å 18 ‚Äî –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è
–î–µ–Ω—å 19 ‚Äî –¢–∞–±–∞—Ç–∞ (—Ñ–∏–Ω–∞–ª)
–î–µ–Ω—å 20 ‚Äî –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º
–î–µ–Ω—å 21 ‚Äî –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
–î–µ–Ω—å 22 ‚Äî –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤

–¢—ã —Å–µ–π—á–∞—Å –Ω–∞ –¥–Ω–µ: <b>{current_day}</b>
"""
    
    await callback.message.answer(
        schedule_text,
        parse_mode="HTML",
        reply_markup=keyboards.get_back_to_menu_keyboard()
    )


@router.callback_query(F.data == "help")
async def help_menu(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å"""
    await callback.answer()
    
    help_text = """‚ùì **–ü–û–ú–û–©–¨**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤?**
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –í—ã–ø–æ–ª–Ω—è–π –∏—Ö –∏ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ ¬´‚úÖ –í–´–ü–û–õ–ù–ò–õ–ê¬ª –∏–ª–∏ ¬´‚úçÔ∏è –°–î–ï–õ–ê–ù–û¬ª.

**–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?**
–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–Ω–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤, –≤—Å–µ —Ç–∞–±–∞—Ç—ã –∏ —Ç.–¥.) —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—á–∏–≤–∫–∏.

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?**
–í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –î–û –∏ –ü–û–°–õ–ï, –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –î–µ–Ω—å 22.

**–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ –¥–µ–Ω—å?**
–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´‚ùå –ü–†–û–ü–£–°–ö–ê–Æ¬ª –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é. –ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–Ω–∏.

**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/start - –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/photo - –º–æ—ë —Ñ–æ—Ç–æ –î–û

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ @delaytelofit
"""
    
    await callback.message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=keyboards.get_back_to_menu_keyboard()
    )


@router.callback_query(F.data == "my_profile")
async def my_profile(callback: CallbackQuery):
    """–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"""
    await callback.answer()
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_text = f"""üë§ <b>–ú–û–ô –ü–†–û–§–ò–õ–¨</b>

<b>–ò–º—è:</b> {user['first_name']}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if user['last_name']:
        profile_text += f"<b>–§–∞–º–∏–ª–∏—è:</b> {user['last_name']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
    if user['username']:
        profile_text += f"<b>Username:</b> @{user['username']}\n"
    
    profile_text += f"""
<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user['registration_date'][:10]}
<b>üìç –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å:</b> –î–µ–Ω—å {user['current_day']}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: {db.get_user_total_score(user_id)}
‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {int((db.get_user_total_score(user_id) / 22) * 100)}%
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = db.get_user_achievements(user_id)
    if achievements:
        profile_text += f"\n<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> {len(achievements)}\n"
        for ach in achievements:
            emoji = content.get_achievement_emoji(ach['achievement_name'])
            profile_text += f"{emoji} "
    
    await callback.message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=keyboards.get_back_to_menu_keyboard()
    )


@router.callback_query(F.data == "my_photo_before")
async def my_photo_before(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –î–û"""
    await callback.answer()
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –î–û –∏–∑ –±–∞–∑—ã
    photo = db.get_photo(user_id, "before")
    
    if not photo:
        await callback.message.answer(
            "üì∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –î–û.\n\n"
            "–§–æ—Ç–æ –î–û –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ (–î–µ–Ω—å 0).",
            reply_markup=keyboards.get_back_to_menu_keyboard()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    try:
        await callback.message.answer_photo(
            photo=photo['file_id'],
            caption=f"üì∏ <b>–¢–≤–æ—ë —Ñ–æ—Ç–æ –î–û</b>\n\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo['uploaded_at'][:10]}\n\n"
                    f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π!\n"
                    f"–£–∂–µ —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏—à—å —Ä–∞–∑–Ω–∏—Ü—É!",
            parse_mode="HTML",
            reply_markup=keyboards.get_back_to_menu_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @delaytelofit",
            reply_markup=keyboards.get_back_to_menu_keyboard()
        )
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –î–û: {e}")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞–±–∞—Ç–∞-–ò–Ω—Ç–µ–Ω—Å–∏–≤:",
        reply_markup=keyboards.get_main_menu_keyboard()
    )


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_text = f"""üë§ <b>–ú–û–ô –ü–†–û–§–ò–õ–¨</b>

<b>–ò–º—è:</b> {user['first_name']}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if user['last_name']:
        profile_text += f"<b>–§–∞–º–∏–ª–∏—è:</b> {user['last_name']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
    if user['username']:
        profile_text += f"<b>Username:</b> @{user['username']}\n"
    
    profile_text += f"""
<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user['registration_date'][:10]}
<b>üìç –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å:</b> –î–µ–Ω—å {user['current_day']}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: {db.get_user_total_score(user_id)}
‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {int((db.get_user_total_score(user_id) / 22) * 100)}%
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = db.get_user_achievements(user_id)
    if achievements:
        profile_text += f"\n<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> {len(achievements)}\n"
        for ach in achievements:
            emoji = content.get_achievement_emoji(ach['achievement_name'])
            profile_text += f"{emoji} "
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=keyboards.get_back_to_menu_keyboard()
    )


@router.message(Command("photo"))
async def cmd_photo(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /photo - –º–æ—ë —Ñ–æ—Ç–æ –î–û"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –î–û –∏–∑ –±–∞–∑—ã
    photo = db.get_photo(user_id, "before")
    
    if not photo:
        await message.answer(
            "üì∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –î–û.\n\n"
            "–§–æ—Ç–æ –î–û –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ (–î–µ–Ω—å 0).",
            reply_markup=keyboards.get_back_to_menu_keyboard()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    try:
        await message.answer_photo(
            photo=photo['file_id'],
            caption=f"üì∏ <b>–¢–≤–æ—ë —Ñ–æ—Ç–æ –î–û</b>\n\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo['uploaded_at'][:10]}\n\n"
                    f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π!\n"
                    f"–£–∂–µ —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏—à—å —Ä–∞–∑–Ω–∏—Ü—É!",
            parse_mode="HTML",
            reply_markup=keyboards.get_back_to_menu_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @delaytelofit",
            reply_markup=keyboards.get_back_to_menu_keyboard()
        )
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –î–û: {e}")

