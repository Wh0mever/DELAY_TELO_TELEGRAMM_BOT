# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import config
import content
import keyboards
from database import db

router = Router()


class RegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    waiting_for_name = State()
    waiting_for_photo_before = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if db.user_exists(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user = db.get_user(user_id)
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üëã\n\n"
            f"–¢—ã –Ω–∞ {user['current_day']} –¥–Ω–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        db.add_user(user_id, username, first_name, last_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –î–µ–Ω—å 0 - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –§–æ—Ç–æ 1
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º send_photo_safe –∏–∑ days
        from handlers.days import send_photo_safe
        await send_photo_safe(
            message,
            config.PHOTOS[1],
            content.DAY_0_WELCOME,
            reply_markup=keyboards.get_start_keyboard(),
            photo_num=1  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞
        )


@router.callback_query(F.data == "how_it_works")
async def how_it_works(callback: CallbackQuery):
    """–ö–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ"""
    await callback.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –§–æ—Ç–æ 2
    from handlers.days import send_photo_safe
    await send_photo_safe(
        callback,
        config.PHOTOS[2],
        content.DAY_0_HOW_IT_WORKS,
        reply_markup=keyboards.get_steps_keyboard(),
        photo_num=2
    )


@router.callback_query(F.data == "first_steps")
async def first_steps(callback: CallbackQuery):
    """–ü–µ—Ä–≤—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏"""
    await callback.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –§–æ—Ç–æ 3
    from handlers.days import send_photo_safe
    await send_photo_safe(
        callback,
        config.PHOTOS[3],
        content.DAY_0_FIRST_STEPS,
        photo_num=3
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª—ã
    try:
        guide = FSInputFile(config.PDFS["guide"])
        await callback.message.answer_document(
            document=guide,
            caption="üìï –ì–∞–π–¥ –ò–Ω—Ç–µ–Ω—Å–∏–≤–∞ –î–µ–ª–∞–π–¢–µ–ª–æ"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ì–∞–π–¥–∞: {e}")
    
    try:
        trackers = FSInputFile(config.PDFS["trackers"])
        await callback.message.answer_document(
            document=trackers,
            caption="üìã –¢—Ä–µ–∫–µ—Ä—ã –ß–∞—Ç –†–µ–∞–ª–∏—Ç–∏"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¢—Ä–µ–∫–µ—Ä–æ–≤: {e}")
    
    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å" –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await callback.message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å! üëá",
        reply_markup=keyboards.get_ready_keyboard()
    )


@router.callback_query(F.data == "ready_to_start")
async def ready_to_start(callback: CallbackQuery, state: FSMContext):
    """–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å - –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üòä")
    
    user_id = callback.from_user.id
    
    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–°—Ç–∞—Ä—Ç"
    if db.add_achievement(user_id, "start"):
        await callback.message.answer(content.get_achievement_message("start"))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    await callback.message.answer(content.DAY_0_REQUEST_NAME)
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    user_id = message.from_user.id
    full_name = message.text.strip()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    parts = full_name.split(maxsplit=1)
    first_name = parts[0] if len(parts) > 0 else full_name
    last_name = parts[1] if len(parts) > 1 else None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db.set_certificate_name(user_id, first_name, last_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ "–î–æ"
    await message.answer(content.DAY_0_REQUEST_PHOTO)
    await state.set_state(RegistrationStates.waiting_for_photo_before)


@router.message(RegistrationStates.waiting_for_photo_before, F.photo)
async def process_photo_before(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –î–æ"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db.add_photo(user_id, 'before', file_id)
    
    # –û—Ç–º–µ—á–∞–µ–º –î–µ–Ω—å 0 –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    db.mark_day_completed(user_id, 0, 'start')
    db.update_user_day(user_id, 0)
    
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ ¬´–î–æ¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤! üî•\n\n"
        "–ó–∞–≤—Ç—Ä–∞ –≤ 09:00 –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –î–µ–Ω—å 1, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
        reply_markup=keyboards.get_week_start_keyboard(1)
    )
    
    await state.clear()


@router.message(Command("menu"))
async def show_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞–±–∞—Ç–∞-–ò–Ω—Ç–µ–Ω—Å–∏–≤:",
        reply_markup=keyboards.get_main_menu_keyboard()
    )

