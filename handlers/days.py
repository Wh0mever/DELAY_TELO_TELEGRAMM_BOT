# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import config
import content
import keyboards
from database import db
from certificate_generator import generate_certificate

router = Router()


def split_long_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    
    Args:
        text: —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
        max_length: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4000, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 4096)
    
    Returns:
        —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º (–¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ + —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞
        if len(current_part) + len(paragraph) + 2 <= max_length:
            if current_part:
                current_part += "\n\n" + paragraph
            else:
                current_part = paragraph
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part)
            
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–∞–º –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if len(paragraph) > max_length:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = paragraph.split('. ')
                temp_part = ""
                for sentence in sentences:
                    if len(temp_part) + len(sentence) + 2 <= max_length:
                        if temp_part:
                            temp_part += ". " + sentence
                        else:
                            temp_part = sentence
                    else:
                        if temp_part:
                            parts.append(temp_part)
                        temp_part = sentence
                if temp_part:
                    current_part = temp_part
            else:
                current_part = paragraph
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part)
    
    return parts


async def send_before_after_photos(message_obj, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –î–û –∏ –ü–û–°–õ–ï —Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –ë–î
    photo_before = db.get_photo(user_id, "before")
    photo_after = db.get_photo(user_id, "after")
    
    if not photo_before or not photo_after:
        print(f"‚ö†Ô∏è –§–æ—Ç–æ –î–û –∏–ª–∏ –ü–û–°–õ–ï –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è user {user_id}")
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if hasattr(message_obj, 'message'):
            # –≠—Ç–æ CallbackQuery
            chat = message_obj.message
        else:
            # –≠—Ç–æ Message
            chat = message_obj
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await chat.answer(
            "üì∏ <b>–¢–í–û–Ø –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø</b>\n\n"
            "–í–∑–≥–ª—è–Ω–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∑–∞ —ç—Ç–∏ 21 –¥–µ–Ω—å! üí´",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –î–û
        await chat.answer_photo(
            photo=photo_before['file_id'],
            caption="üì∏ <b>–§–û–¢–û –î–û</b>\n\n"
                    f"–î–∞—Ç–∞: {photo_before['uploaded_at'][:10]}",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ü–û–°–õ–ï
        await chat.answer_photo(
            photo=photo_after['file_id'],
            caption="üì∏ <b>–§–û–¢–û –ü–û–°–õ–ï</b>\n\n"
                    f"–î–∞—Ç–∞: {photo_after['uploaded_at'][:10]}",
            parse_mode="HTML"
        )
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        motivation_text = """‚ú® <b>–¢–´ –≠–¢–û –°–î–ï–õ–ê–õ–ê!</b>

–°–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π! üåü

–ó–∞ —ç—Ç–∏ 21 –¥–µ–Ω—å —Ç—ã:
üí™ –£–∫—Ä–µ–ø–∏–ª–∞ —Å–≤–æ—ë —Ç–µ–ª–æ
üî• –ó–∞–∂–≥–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É
üíö –í–ª—é–±–∏–ª–∞—Å—å –≤ –¥–≤–∏–∂–µ–Ω–∏–µ
‚ú® –°—Ç–∞–ª–∞ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –≤ —Å–µ–±–µ

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–¥–æ" –∏ "–ø–æ—Å–ª–µ". –≠—Ç–æ —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å–∏–ª—ã, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –ª—é–±–≤–∏ –∫ —Å–µ–±–µ.

<b>–¢—ã –∫—Ä–∞—Å–∞–≤–∏—Ü–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥! üöÄ</b>

–° –ª—é–±–æ–≤—å—é –∏ –≥–æ—Ä–¥–æ—Å—Ç—å—é –∑–∞ —Ç–µ–±—è,
üíó –ù–∞—Ç–∞—à–∞ –î–µ–ª–∞–π–¢–µ–ª–æ"""
        
        await chat.answer(motivation_text, parse_mode="HTML")
        
        print(f"‚úÖ –§–æ—Ç–æ –î–û/–ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã user {user_id}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –î–û/–ü–û–°–õ–ï: {e}")


async def send_long_message(message_obj, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    
    Args:
        message_obj: Message –∏–ª–∏ CallbackQuery
        text: —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        reply_markup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
    """
    parts = split_long_message(text)
    
    for i, part in enumerate(parts):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        keyboard = reply_markup if i == len(parts) - 1 else None
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if hasattr(message_obj, 'message'):
            # –≠—Ç–æ CallbackQuery
            await message_obj.message.answer(part, reply_markup=keyboard)
        else:
            # –≠—Ç–æ Message
            await message_obj.answer(part, reply_markup=keyboard)


async def send_video_from_channel(message: Message, day_key):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        await message.bot.copy_message(
            chat_id=message.chat.id,
            from_chat_id=config.VIDEO_CHANNEL_ID,
            message_id=config.VIDEO_MESSAGE_IDS[day_key]
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –¥–µ–Ω—å {day_key}: {e}")


async def send_photo_safe(message_obj, photo_path, caption, reply_markup=None, photo_num=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        message_obj: Message –∏–ª–∏ CallbackQuery
        photo_path: –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
        caption: –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        reply_markup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        photo_num: –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ (1-12) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ PHOTO_MESSAGE_IDS
    """
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª–µ (–¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–æ—Ç–æ)
    if photo_num and photo_num in config.PHOTO_MESSAGE_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
            message_id = config.PHOTO_MESSAGE_IDS[photo_num]
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
            if hasattr(message_obj, 'message'):
                # –≠—Ç–æ CallbackQuery
                bot = message_obj.bot
                chat_id = message_obj.message.chat.id
            else:
                # –≠—Ç–æ Message
                bot = message_obj.bot
                chat_id = message_obj.chat.id
            
            # –ï—Å–ª–∏ caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>1024), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            if len(caption) > 1000:  # –ó–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 1024
                print(f"‚ö†Ô∏è Caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(caption)} —Å–∏–º–≤–æ–ª–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ caption
                await bot.copy_message(
                    chat_id=chat_id,
                    from_chat_id=config.VIDEO_CHANNEL_ID,
                    message_id=message_id
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await send_long_message(message_obj, caption, reply_markup=reply_markup)
                
                print(f"‚úÖ –§–æ—Ç–æ {photo_num} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ + —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ")
                return
            else:
                # Caption –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–º–µ—Å—Ç–µ
                await bot.copy_message(
                    chat_id=chat_id,
                    from_chat_id=config.VIDEO_CHANNEL_ID,
                    message_id=message_id,
                    caption=caption,
                    reply_markup=reply_markup
                )
                print(f"‚úÖ –§–æ—Ç–æ {photo_num} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ (message_id={message_id})")
                return
            
        except Exception as e:
            error_msg = str(e)
            if "message caption is too long" in error_msg or "MESSAGE_TOO_LONG" in error_msg:
                print(f"‚ö†Ô∏è Caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
                print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ caption –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ...")
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ caption
                    await bot.copy_message(
                        chat_id=chat_id,
                        from_chat_id=config.VIDEO_CHANNEL_ID,
                        message_id=message_id
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                    await send_long_message(message_obj, caption, reply_markup=reply_markup)
                    
                    print(f"‚úÖ –§–æ—Ç–æ {photo_num} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ + —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (fallback)")
                    return
                except Exception as e2:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {photo_num} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(photo_path):
        print(f"‚ö†Ô∏è –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {photo_path}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
        await send_long_message(message_obj, caption, reply_markup=reply_markup)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        photo = FSInputFile(photo_path)
        
        # –ï—Å–ª–∏ caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if len(caption) > 1000:  # –ó–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 1024 –¥–ª—è caption
            print(f"‚ö†Ô∏è Caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(caption)} —Å–∏–º–≤–æ–ª–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ caption
            if hasattr(message_obj, 'message'):
                # –≠—Ç–æ CallbackQuery
                await message_obj.message.answer_photo(photo=photo)
            else:
                # –≠—Ç–æ Message
                await message_obj.answer_photo(photo=photo)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            await send_long_message(message_obj, caption, reply_markup=reply_markup)
            
            print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ + —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ")
        else:
            # Caption –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            if hasattr(message_obj, 'message'):
                # –≠—Ç–æ CallbackQuery
                await message_obj.message.answer_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup
                )
            else:
                # –≠—Ç–æ Message
                await message_obj.answer_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup
                )
            print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {photo_path}")
        
    except Exception as e:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, —Ñ–æ—Ä–º–∞—Ç –∏ —Ç.–¥.)
        error_msg = str(e)
        if "PHOTO_INVALID_DIMENSIONS" in error_msg:
            print(f"‚ö†Ô∏è –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –†–ê–ó–ú–ï–†–´ –§–û–¢–û: {photo_path}")
            print(f"   Telegram —Ç—Ä–µ–±—É–µ—Ç: 1x1 - 10000x10000 –ø–∏–∫—Å–µ–ª–µ–π")
            print(f"   üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config.PHOTO_MESSAGE_IDS")
        elif "MESSAGE_TOO_LONG" in error_msg or "message caption is too long" in error_msg:
            print(f"‚ö†Ô∏è –°–õ–ò–®–ö–û–ú –î–õ–ò–ù–ù–´–ô CAPTION: {len(caption)} —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç 1024)")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {photo_path}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        await send_long_message(message_obj, caption, reply_markup=reply_markup)


class PhotoStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    waiting_for_photo_after = State()


# === –ù–ï–î–ï–õ–Ø 1 ===

@router.callback_query(F.data == "start_day_1")
async def start_day_1(callback: CallbackQuery):
    """–î–µ–Ω—å 1 - –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –¢–∞–±–∞—Ç–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏ 1
    await send_photo_safe(
        callback,
        config.PHOTOS[4],
        content.WEEK_1_START,
        reply_markup=keyboards.get_week_start_keyboard(1),
        photo_num=4
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å 1
    await callback.message.answer(content.DAY_1_TEXT)
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    await send_video_from_channel(callback.message, 1)
    
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 1 - –¢–∞–±–∞—Ç–∞",
        reply_markup=keyboards.get_workout_keyboard(1)
    )
    
    db.update_user_day(user_id, 1)


@router.callback_query(F.data.startswith("completed_workout_"))
async def completed_workout(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
    
    user_id = callback.from_user.id
    day = int(callback.data.split("_")[-1])
    
    # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    db.mark_day_completed(user_id, day, 'workout')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
    await check_and_give_achievements(callback.message, user_id, day)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if day == 1:
        await callback.message.answer(
            content.DAY_1_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 5:
        await callback.message.answer(
            content.DAY_5_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 7:
        # –î–µ–Ω—å 7 - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ 1
        await callback.message.answer(content.WEEK_1_CONCLUSION)
        if db.add_achievement(user_id, "week_1"):
            await callback.message.answer(content.get_achievement_message("week_1"))
        if db.add_achievement(user_id, "alone"):
            await callback.message.answer(content.get_achievement_message("alone"))
        await callback.message.answer(
            "–ì–æ—Ç–æ–≤–∞ –∫–æ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–µ?",
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 8:
        await callback.message.answer(
            content.DAY_8_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 10:
        await callback.message.answer(
            content.DAY_10_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 12:
        await callback.message.answer(
            content.DAY_12_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 14:
        # –î–µ–Ω—å 14 - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ 2
        await send_photo_safe(
            callback,
            config.PHOTOS[8],
            content.WEEK_2_CONCLUSION,
            photo_num=8
        )
        if db.add_achievement(user_id, "week_2"):
            await callback.message.answer(content.get_achievement_message("week_2"))
        if db.add_achievement(user_id, "tasty"):
            await callback.message.answer(content.get_achievement_message("tasty"))
        await callback.message.answer(
            "–ì–æ—Ç–æ–≤–∞ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–µ–¥–µ–ª–µ?",
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 15:
        await callback.message.answer(
            content.DAY_15_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 17:
        await callback.message.answer(
            content.DAY_17_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
        # –ê—á–∏–≤–∫–∞ "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω—É—Å"
        if db.get_completed_glutes_count(user_id) >= 3:
            if db.add_achievement(user_id, "max_tone"):
                await callback.message.answer(content.get_achievement_message("max_tone"))
    elif day == 19:
        await callback.message.answer(
            content.DAY_19_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
        # –ê—á–∏–≤–∫–∞ "–¢–∞–±–∞—Ç–∞ Queen"
        if db.get_completed_tabata_count(user_id) >= 4:
            if db.add_achievement(user_id, "tabata_queen"):
                await callback.message.answer(content.get_achievement_message("tabata_queen"))
    elif day == 21:
        await callback.message.answer(
            content.DAY_21_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    else:
        await callback.message.answer(
            f"–î–µ–Ω—å {day} –≤—ã–ø–æ–ª–Ω–µ–Ω! üéâ",
            reply_markup=keyboards.get_next_day_keyboard(day)
        )


@router.callback_query(F.data.startswith("completed_task_"))
async def completed_task(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    await callback.answer("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
    
    user_id = callback.from_user.id
    day = int(callback.data.split("_")[-1])
    
    # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    db.mark_day_completed(user_id, day, 'task')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
    await check_and_give_achievements(callback.message, user_id, day)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    if day == 2:
        await callback.message.answer(
            content.DAY_2_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 4:
        await callback.message.answer(
            content.DAY_4_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 6:
        await callback.message.answer(
            content.DAY_6_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 9:
        await callback.message.answer(
            content.DAY_9_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 11:
        await callback.message.answer(content.DAY_11_SNACK_IDEAS)
        await callback.message.answer(
            content.DAY_11_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 13:
        await callback.message.answer(
            content.DAY_13_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 16:
        await callback.message.answer(
            content.DAY_16_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 18:
        await callback.message.answer(
            content.DAY_18_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    elif day == 20:
        await callback.message.answer(
            content.DAY_20_COMPLETED,
            reply_markup=keyboards.get_next_day_keyboard(day)
        )
    else:
        await callback.message.answer(
            f"–î–µ–Ω—å {day} –≤—ã–ø–æ–ª–Ω–µ–Ω! üéâ",
            reply_markup=keyboards.get_next_day_keyboard(day)
        )


@router.callback_query(F.data.startswith("skip_day_"))
async def skip_day(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–Ω—è"""
    await callback.answer("–î–µ–Ω—å –ø—Ä–æ–ø—É—â–µ–Ω")
    day = int(callback.data.split("_")[-1])
    
    await callback.message.answer(
        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å üíö\n"
        "–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–¥–∞–≤–∞–π—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥!",
        reply_markup=keyboards.get_next_day_keyboard(day)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

@router.callback_query(F.data == "start_day_2")
async def start_day_2(callback: CallbackQuery):
    """–î–µ–Ω—å 2 - –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(
        content.DAY_2_TEXT,
        reply_markup=keyboards.get_task_keyboard(2)
    )
    db.update_user_day(user_id, 2)


@router.callback_query(F.data == "start_day_3")
async def start_day_3(callback: CallbackQuery):
    """–î–µ–Ω—å 3 - –†—É–∫–∏ + –ü—Ä–µ—Å—Å"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_3_TEXT)
    await send_video_from_channel(callback.message, 3)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 3 - –†—É–∫–∏ –∏ –ü—Ä–µ—Å—Å",
        reply_markup=keyboards.get_workout_keyboard(3)
    )
    db.update_user_day(user_id, 3)


@router.callback_query(F.data == "start_day_4")
async def start_day_4(callback: CallbackQuery):
    """–î–µ–Ω—å 4 - 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await send_photo_safe(
        callback,
        config.PHOTOS[12],
        content.DAY_4_TEXT,
        reply_markup=keyboards.get_task_keyboard(4),
        photo_num=12
    )
    db.update_user_day(user_id, 4)


@router.callback_query(F.data == "start_day_5")
async def start_day_5(callback: CallbackQuery):
    """–î–µ–Ω—å 5 - –Ø–≥–æ–¥–∏—Ü—ã"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_5_TEXT)
    await send_video_from_channel(callback.message, 5)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 5 - –Ø–≥–æ–¥–∏—Ü—ã",
        reply_markup=keyboards.get_workout_keyboard(5)
    )
    db.update_user_day(user_id, 5)


@router.callback_query(F.data == "start_day_6")
async def start_day_6(callback: CallbackQuery):
    """–î–µ–Ω—å 6 - –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(
        content.DAY_6_TEXT,
        reply_markup=keyboards.get_task_keyboard(6)
    )
    db.update_user_day(user_id, 6)


@router.callback_query(F.data == "start_day_7")
async def start_day_7(callback: CallbackQuery):
    """–î–µ–Ω—å 7 - –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è + –ô–æ–≥–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_7_TEXT)
    await send_video_from_channel(callback.message, "7_dance")
    await send_video_from_channel(callback.message, "7_yoga")
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 7 - –¢–∞–Ω—Ü—ã + –ô–æ–≥–∞",
        reply_markup=keyboards.get_workout_keyboard(7)
    )
    db.update_user_day(user_id, 7)


@router.callback_query(F.data == "start_day_8")
async def start_day_8(callback: CallbackQuery):
    """–î–µ–Ω—å 8 - –ù–ï–î–ï–õ–Ø 2"""
    await callback.answer()
    user_id = callback.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏ 2
    await send_photo_safe(
        callback,
        config.PHOTOS[5],
        content.WEEK_2_START,
        reply_markup=keyboards.get_week_start_keyboard(2),
        photo_num=5
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å 8
    await callback.message.answer(content.DAY_8_TEXT)
    await send_video_from_channel(callback.message, 8)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 8 - –†—É–∫–∏ –∏ –ü—Ä–µ—Å—Å —Å —Ä–µ–∑–∏–Ω–∫–æ–π",
        reply_markup=keyboards.get_workout_keyboard(8)
    )
    db.update_user_day(user_id, 8)


@router.callback_query(F.data == "start_day_9")
async def start_day_9(callback: CallbackQuery):
    """–î–µ–Ω—å 9 - –ò—Å—Ç–æ—Ä–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await send_photo_safe(
        callback,
        config.PHOTOS[10],
        content.DAY_9_TEXT,
        reply_markup=keyboards.get_task_keyboard(9),
        photo_num=10
    )
    db.update_user_day(user_id, 9)


@router.callback_query(F.data == "start_day_10")
async def start_day_10(callback: CallbackQuery):
    """–î–µ–Ω—å 10 - –Ø–≥–æ–¥–∏—Ü—ã —Å —Ä–µ–∑–∏–Ω–∫–æ–π"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_10_TEXT)
    await send_video_from_channel(callback.message, 10)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 10 - –Ø–≥–æ–¥–∏—Ü—ã —Å —Ä–µ–∑–∏–Ω–∫–æ–π",
        reply_markup=keyboards.get_workout_keyboard(10)
    )
    db.update_user_day(user_id, 10)


@router.callback_query(F.data == "start_day_11")
async def start_day_11(callback: CallbackQuery):
    """–î–µ–Ω—å 11 - –û—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(
        content.DAY_11_TEXT,
        reply_markup=keyboards.get_task_keyboard(11)
    )
    db.update_user_day(user_id, 11)


@router.callback_query(F.data == "start_day_12")
async def start_day_12(callback: CallbackQuery):
    """–î–µ–Ω—å 12 - –¢–∞–±–∞—Ç–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_12_TEXT)
    await send_video_from_channel(callback.message, 12)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 12 - –¢–∞–±–∞—Ç–∞",
        reply_markup=keyboards.get_workout_keyboard(12)
    )
    db.update_user_day(user_id, 12)


@router.callback_query(F.data == "start_day_13")
async def start_day_13(callback: CallbackQuery):
    """–î–µ–Ω—å 13 - –ì–æ—Ç–æ–≤–ª—é —Å –ª—é–±–æ–≤—å—é"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(
        content.DAY_13_TEXT,
        reply_markup=keyboards.get_task_keyboard(13)
    )
    db.update_user_day(user_id, 13)


@router.callback_query(F.data == "start_day_14")
async def start_day_14(callback: CallbackQuery):
    """–î–µ–Ω—å 14 - –¢–∞–Ω—Ü—ã + –ô–æ–≥–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_14_TEXT)
    await send_video_from_channel(callback.message, 14)
    await send_video_from_channel(callback.message, "14_yoga")
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 14 - –¢–∞–Ω—Ü—ã + –ô–æ–≥–∞",
        reply_markup=keyboards.get_workout_keyboard(14)
    )
    db.update_user_day(user_id, 14)


@router.callback_query(F.data == "start_day_15")
async def start_day_15(callback: CallbackQuery):
    """–î–µ–Ω—å 15 - –ù–ï–î–ï–õ–Ø 3"""
    await callback.answer()
    user_id = callback.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–µ–¥–µ–ª–∏ 3 —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    week3_header = """‚ú® –ù–ï–î–ï–õ–Ø 3 ‚Äî #–ü–û–õ–ù–û–ï–ü–û–ì–†–£–ñ–ï–ù–ò–ï

–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ –∏, –ø–æ–∂–∞–ª—É–π, —Å–∞–º—ã–π –æ—Å–æ–±–µ–Ω–Ω—ã–π üí´ –ó–∞ —ç—Ç–∏ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ —Ç—ã —É–∂–µ —É–∫—Ä–µ–ø–∏–ª–∞ —Ç–µ–ª–æ, –Ω–∞–ª–∞–¥–∏–ª–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –≤ –¥–≤–∏–∂–µ–Ω–∏–µ, –ø—Ä–∏–≤—ã—á–∫—É, –ª—ë–≥–∫–æ—Å—Ç—å."""
    
    await send_photo_safe(
        callback,
        config.PHOTOS[6],
        week3_header,
        photo_num=6
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (–∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ caption 1024 —Å–∏–º–≤–æ–ª–∞)
    week3_details = """üéÅ –í —á–µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ —è –¥–∞—Ä—é —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ 7-–¥–Ω–µ–≤–Ω–æ–º—É –ø—Ä–æ–±–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –î–µ–ª–∞–π –¢–µ–ª–æ (PDF –Ω–∏–∂–µ). –≠—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –¥–µ–≤—á–æ–Ω–∫–∏ –∏–∑ –Ω–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-—Å–µ–º–µ–π—Å—Ç–≤–∞ —Å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å—é:
- –∫–æ—Ä–æ—Ç–∫–∏–µ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ 20‚Äì25 –º–∏–Ω—É—Ç,
- —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî –æ—Ç —Ç–æ–Ω—É—Å–∞ –¥–æ —Ä–∞—Å—Ç—è–∂–∫–∏,
- –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ YouTube-–≤–∏–¥–µ–æ –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞.

üí™ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ—è —Ü–µ–ª—å:
‚óè –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞, –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–∏–ª—ã;
‚óè –∏–ª–∏ –¥–∞–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞, –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–µ—à—å –∏–¥—Ç–∏ –Ω–∞ –≤—Å–µ 200%.

üìé PDF —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –Ω–∏–∂–µ. –î–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —É–∂–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —à–ª–∏ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–Ω—è–º–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞. –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Google Drive –∏–ª–∏ Foxit PDF Reader, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏.

–≠—Ç–æ —Ç–≤–æ–π –º–∏–Ω–∏-—á–µ–ª–ª–µ–Ω–¥–∂, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å –ª–µ–≥–∫–æ –∏ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏.

üí´ –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: —Å–ª—É—à–∞–π —Ç–µ–ª–æ. –ù–∏–∫–∞–∫–∏—Ö "–Ω–∞–¥–æ", —Ç–æ–ª—å–∫–æ "—Ö–æ—á—É".

–ü—É—Å—Ç—å —ç—Ç–∞ –Ω–µ–¥–µ–ª—è —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç–∏, –≥–¥–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —á–∞—Å—Ç—å—é —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏."""
    
    await callback.message.answer(week3_details)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await callback.message.answer(
        "üìÖ –ü–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ-–∫–∞–ª–µ–Ω–¥–∞—Ä—å:",
        reply_markup=keyboards.get_demo_calendar_keyboard()
    )
    db.update_user_day(user_id, 15)


@router.callback_query(F.data == "get_demo_calendar")
async def get_demo_calendar(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–µ–º–æ-–∫–∞–ª–µ–Ω–¥–∞—Ä—å...")
    
    demo_calendar = FSInputFile(config.PDFS["demo_calendar"])
    await callback.message.answer_document(
        document=demo_calendar,
        caption="üìÖ –î–µ–º–æ–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ò–Ω—Ç–µ–Ω—Å–∏–≤"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å 15
    await callback.message.answer(content.DAY_15_TEXT)
    await send_video_from_channel(callback.message, 15)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 15 - –†—É–∫–∏ –∏ –ü—Ä–µ—Å—Å",
        reply_markup=keyboards.get_workout_keyboard(15)
    )


@router.callback_query(F.data == "start_day_16")
async def start_day_16(callback: CallbackQuery):
    """–î–µ–Ω—å 16 - 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(
        content.DAY_16_TEXT,
        reply_markup=keyboards.get_task_keyboard(16)
    )
    db.update_user_day(user_id, 16)


@router.callback_query(F.data == "start_day_17")
async def start_day_17(callback: CallbackQuery):
    """–î–µ–Ω—å 17 - –Ø–≥–æ–¥–∏—Ü—ã —Ñ–∏–Ω–∞–ª"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_17_TEXT)
    await send_video_from_channel(callback.message, 17)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 17 - –Ø–≥–æ–¥–∏—Ü—ã",
        reply_markup=keyboards.get_workout_keyboard(17)
    )
    db.update_user_day(user_id, 17)


@router.callback_query(F.data == "start_day_18")
async def start_day_18(callback: CallbackQuery):
    """–î–µ–Ω—å 18 - –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(
        content.DAY_18_TEXT,
        reply_markup=keyboards.get_task_keyboard(18)
    )
    db.update_user_day(user_id, 18)


@router.callback_query(F.data == "start_day_19")
async def start_day_19(callback: CallbackQuery):
    """–î–µ–Ω—å 19 - –¢–∞–±–∞—Ç–∞ —Ñ–∏–Ω–∞–ª"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_19_TEXT)
    await send_video_from_channel(callback.message, 19)
    await callback.message.answer(
        "üìπ –î–µ–Ω—å 19 - –¢–∞–±–∞—Ç–∞",
        reply_markup=keyboards.get_workout_keyboard(19)
    )
    db.update_user_day(user_id, 19)


@router.callback_query(F.data == "start_day_20")
async def start_day_20(callback: CallbackQuery):
    """–î–µ–Ω—å 20 - –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await send_photo_safe(
        callback,
        config.PHOTOS[11],
        content.DAY_20_TEXT,
        reply_markup=keyboards.get_task_keyboard(20),
        photo_num=11
    )
    db.update_user_day(user_id, 20)


@router.callback_query(F.data == "start_day_21")
async def start_day_21(callback: CallbackQuery):
    """–î–µ–Ω—å 21 - –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await callback.message.answer(content.DAY_21_TEXT)
    await callback.message.answer(
        "üé• –í–∏–¥–µ–æ –î–µ–Ω—å 21 - –¢–∞–Ω—Ü—ã (Bruno Mars + Shakira)\n(–í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞)",
        reply_markup=keyboards.get_workout_keyboard(21)
    )
    db.update_user_day(user_id, 21)


@router.callback_query(F.data == "start_day_22")
async def start_day_22(callback: CallbackQuery):
    """–î–µ–Ω—å 22 - –§–∏–Ω–∞–ª –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤"""
    await callback.answer()
    user_id = callback.from_user.id
    
    await send_photo_safe(
        callback,
        config.PHOTOS[9],
        content.DAY_22_TEXT,
        reply_markup=keyboards.get_upload_photo_keyboard("after"),
        photo_num=9
    )
    db.update_user_day(user_id, 22)


@router.callback_query(F.data == "upload_photo_after")
async def upload_photo_after(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –ü–æ—Å–ª–µ"""
    await callback.answer("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ ¬´–ü–æ—Å–ª–µ¬ª")
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ¬´–ü–æ—Å–ª–µ¬ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:")
    await state.set_state(PhotoStates.waiting_for_photo_after)


@router.message(PhotoStates.waiting_for_photo_after, F.photo)
async def process_photo_after(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ü–æ—Å–ª–µ"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º file_id
    photo = message.photo[-1]
    file_id = photo.file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db.add_photo(user_id, 'after', file_id)
    
    await message.answer("‚úÖ –§–æ—Ç–æ ¬´–ü–æ—Å–ª–µ¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 100% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if db.check_100_percent_completion(user_id):
        # 100% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!
        if db.add_achievement(user_id, "100_percent"):
            await message.answer(content.get_achievement_message("100_percent"))
        
        await message.answer(
            content.DAY_22_SUCCESS,
            reply_markup=keyboards.get_certificate_keyboard()
        )
    else:
        await message.answer(
            "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏—è üí™"
        )
    
    await state.clear()


@router.callback_query(F.data == "get_certificate")
async def get_certificate_handler(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –≤ –ë–î
    full_name = db.get_certificate_name(user_id)
    
    if not full_name:
        # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        await callback.message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —Ç–∞–∫, –∫–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞, "
            "—á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:"
        )
        db.set_awaiting_name_input(user_id, True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    try:
        cert_path = generate_certificate(full_name, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        certificate = FSInputFile(cert_path)
        await callback.message.answer_document(
            document=certificate,
            caption=f"üéì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {full_name}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await callback.message.answer(
            f"üéÅ –ü–†–û–ú–û–ö–û–î: {config.PROMO_CODE}\n\n"
            f"{config.PROMO_DESCRIPTION}\n\n"
            f"{content.DAY_22_FINAL_MESSAGE}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –î–û –∏ –ü–û–°–õ–ï
        await send_before_after_photos(callback, user_id)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")


@router.message(F.text)
async def handle_certificate_name_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –î–µ–Ω—å 22"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    if db.is_awaiting_name_input(user_id):
        full_name = message.text.strip()
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        parts = full_name.split(maxsplit=1)
        first_name = parts[0] if len(parts) > 0 else full_name
        last_name = parts[1] if len(parts) > 1 else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db.set_certificate_name(user_id, first_name, last_name)
        db.set_awaiting_name_input(user_id, False)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        try:
            cert_path = generate_certificate(full_name, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            certificate = FSInputFile(cert_path)
            await message.answer_document(
                document=certificate,
                caption=f"üéì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {full_name}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            await message.answer(
                f"üéÅ –ü–†–û–ú–û–ö–û–î: {config.PROMO_CODE}\n\n"
                f"{config.PROMO_DESCRIPTION}\n\n"
                f"{content.DAY_22_FINAL_MESSAGE}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –î–û –∏ –ü–û–°–õ–ï
            await send_before_after_photos(message, user_id)
            
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")


async def check_and_give_achievements(message: Message, user_id: int, day: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    progress = db.get_user_progress(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ü–æ–ª–ø—É—Ç–∏" (50%)
    if progress['percentage'] >= 50:
        if db.add_achievement(user_id, "halfway"):
            await message.answer(content.get_achievement_message("halfway"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∞—á–∏–≤–æ–∫
    if day == 7:
        if db.add_achievement(user_id, "alone"):
            await message.answer(content.get_achievement_message("alone"))
    
    if day == 14:
        if db.add_achievement(user_id, "tasty"):
            await message.answer(content.get_achievement_message("tasty"))
    
    if day == 15:
        if db.add_achievement(user_id, "immersion"):
            await message.answer(content.get_achievement_message("immersion"))

